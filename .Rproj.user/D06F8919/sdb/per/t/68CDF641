{
    "contents" : "require(caret)\nrequire(e1071)\nrequire(magrittr)\nrequire(car)\n\nGetBestTune <- function(Model) {\n  if (class(Model)==\"caretStack\")\n    Model$ens_model$results[rownames(Model$ens_model$bestTune), ]\n  else\n    Model$results[rownames(Model$bestTune), ]\n}\n\nGetOutOfSamplePredictions <- function(Model) {\n  BestTune <- GetBestTune(Model)\n  Parameters <- names(BestTune)[!(names(BestTune) %in% c(Model$perfNames, paste0(Model$perfNames, \"SD\")))]\n  Predictions <- Model$pred[eval(parse(text=paste(paste0(\"Model$pred$\", Parameters, \" == BestTune$\", Parameters), collapse=\" & \"))), ]\n  Predictions <- data.frame()\n  for (Fold in names(Model$control$indexOut))\n    Predictions <- rbind(Predictions, unique(BestTunePredictions[BestTunePredictions$Resample==Fold, ]))\n  Predictions$pred[order(Predictions$rowIndex)]\n} \n\nDF1 <- read.csv(\"~/GitHub/AirportDelayAnalysis/Casefile-Data/Martijn_GeNIe_Exp.csv\")\nDF2 <- read.csv(\"~/GitHub/AirportDelayAnalysis/Casefile-Data/DelayData.csv\")\nDF <- cbind(DF1, DF2)\nDF[,2] <- NULL\nnames(DF) <- c(\"Wind.Avg\", \"Delay.Min\", \"Wind\", \"Direction\", \"Delay\")\nDF <- with(DF, data.frame(Wind.Avg, Wind, Direction, Delay.Min, Delay))\nDF$DegreesOffNW <- 22.5*c(6, 5, 7, 2, 4, 3, 1, 0, 6, 8, 7, 5, 4, 2, 1, 3)[as.integer(DF1$Direction)]\nDF$DegreesOffNE <- 22.5*c(2, 1, 3, 2, 0, 1, 3, 4, 6, 4, 5, 7, 8, 6, 5, 7)[as.integer(DF1$Direction)]\n\nPreProcModel <- preProcess(DF[, c(\"Delay.Min\", \"Wind.Avg\", \"DegreesOffNW\", \"DegreesOffNE\")], c(\"center\", \"scale\", \"knnImpute\"))\nDFPP <- predict(PreProcModel, DF[, c(\"Delay.Min\", \"Wind.Avg\", \"DegreesOffNW\", \"DegreesOffNE\")])\nDFPP$Wind.Interaction <- DFPP$Wind.Avg * DFPP$DegreesOffNW\nPreProcModel2 <- preProcess(DFPP, c(\"YeoJohnson\"))\nDFPP <- predict(PreProcModel2, DFPP)\nDFPP <- as.data.frame(sapply(names(DFPP), function(Column)pnorm(DFPP[, Column])))\n\nscatterplotMatrix(~Delay.Min + Wind.Avg + DegreesOffNW + DegreesOffNE, data=DF)\nscatterplotMatrix(~Delay.Min + Wind.Avg + DegreesOffNW + DegreesOffNE + Wind.Interaction, data=DFPP)\ncor(as.matrix(DFPP))\n\nDFPP$Delay <- DF$Delay\n\nModel1 <- train(Delay.Min ~ Wind.Avg * DegreesOffNW + Wind.Avg * DegreesOffNE, \n                data = DFPP, \n                method = \"rf\", \n                tuneLength=5,\n                trControl = trainControl(method = \"cv\", savePredictions=T)\n)\n\nModel2 <- train(DF$Delay ~ Wind.Avg * DegreesOffNW + Wind.Avg * DegreesOffNE, \n                data = DFPP, \n                method = \"rf\", \n                tuneLength=5,\n                trControl = trainControl(method = \"cv\", savePredictions=T)\n)\n\nModel3 <- train(Delay.Min ~ Wind.Avg * DegreesOffNW + Wind.Avg * DegreesOffNE, \n                data = DFPP, \n                method = \"svmRadial\",\n                tuneLength=5,\n                trControl = trainControl(method = \"cv\", savePredictions=T)\n)\n\nModel4 <- train(DF$Delay ~ Wind.Avg * DegreesOffNW + Wind.Avg * DegreesOffNE, \n                data = DFPP, \n                method = \"C5.0\",\n                tuneLength=5,\n                trControl = trainControl(method = \"cv\", savePredictions=T)\n)\n\nModel5 <- train(Delay.Min ~ Wind.Avg * DegreesOffNW + Wind.Avg * DegreesOffNE, \n                data = DFPP, \n                method = \"glm\",\n                trControl = trainControl(method = \"cv\", savePredictions=T)\n)\n\nprint(Model1$results)\nprint(Model2$results)\nprint(Model3$results)\nprint(Model4$results)\nprint(Model5$results)\n\nModel <- train(DF$Delay ~ Wind.Avg * DegreesOffNW + Wind.Avg * DegreesOffNE, \n               data = DFPP, \n               method = \"rf\", \n               tuneLength=5,\n               trControl = trainControl(method = \"cv\", savePredictions=T)\n)\nBestTune <- GetBestTune(Model)\nParameters <- names(BestTune)[!(names(BestTune) %in% c(Model$perfNames, paste0(Model$perfNames, \"SD\")))]\nPredictions <- Model$pred[eval(parse(text=paste(paste0(\"Model$pred$\", Parameters, \" == BestTune$\", Parameters), collapse=\" & \"))), ]\n\nprint(confusionMatrix(Predictions$pred, Predictions$obs))\n",
    "created" : 1428530150243.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1589451052",
    "id" : "68CDF641",
    "lastKnownWriteTime" : 1429620875,
    "path" : "~/GitHub/AirportDelayAnalysis/RandomForest.R",
    "project_path" : "RandomForest.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}