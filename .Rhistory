install.packages("gRain")
source('~/GitHub/AirportDelayAnalysis/gRainExample.R')
install.packages("devtools")
source("http://bioconductor.org/biocLite.R")
biocLite("RBGL")
source('~/GitHub/AirportDelayAnalysis/gRainExample.R')
source('~/GitHub/AirportDelayAnalysis/bnlearnExample.R')
install.packages("bnlearn")
source('~/GitHub/AirportDelayAnalysis/bnlearnExample.R')
install.packages("gs")
source('~/.active-rstudio-document')
install.packages("nodes")
source('~/GitHub/AirportDelayAnalysis/RandomForest.R')
install.packages("Rcpp")
source('~/GitHub/AirportDelayAnalysis/RandomForest.R')
install.packages("ggplot2")
source('~/GitHub/AirportDelayAnalysis/RandomForest.R')
install.packages("train")
library(caret)
source('~/.active-rstudio-document')
install.packages("e1071")
PreProcModel <- preProcess(DF[, c("Delay.Min", "Wind.Avg", "DegreesOffNW", "DegreesOffNE"], c("center", "scale", "YeoJohnson", "knnImpute"))
PreProcModel <- preProcess(DF[, c("Delay.Min", "Wind.Avg", "DegreesOffNW", "DegreesOffNE")], c("center", "scale", "YeoJohnson", "knnImpute"))
DFPP <- pnorm(predict(PreProcModel, DF[, c("Delay.Min", "Wind.Avg", "DegreesOffNW", "DegreesOffNE")]))
install.packages("RANN")
DFPP <- pnorm(predict(PreProcModel, DF[, c("Delay.Min", "Wind.Avg", "DegreesOffNW", "DegreesOffNE")]))
predict(PreProcModel, DF[, c("Delay.Min", "Wind.Avg", "DegreesOffNW", "DegreesOffNE")]
)
pnorm(-1)
pnorm(predict(PreProcModel, DF[, c("Delay.Min", "Wind.Avg", "DegreesOffNW", "DegreesOffNE")]))
pnorm(predict(PreProcModel, DF[, c("Delay.Min", "Wind.Avg", "DegreesOffNW", "DegreesOffNE")][, 1]))
pnorm(predict(PreProcModel, DF[, c("Delay.Min", "Wind.Avg", "DegreesOffNW", "DegreesOffNE")])[, 1])
pnorm(predict(PreProcModel, DF[, c("Delay.Min", "Wind.Avg", "DegreesOffNW", "DegreesOffNE")])[, 1:2])
?preProcess
PreProcModel <- preProcess(DF[, c("Delay.Min", "Wind.Avg", "DegreesOffNW", "DegreesOffNE")], c("center", "scale", "YeoJohnson", "knnImpute", "range"))
DFPP <- sapply(c("Delay.Min", "Wind.Avg", "DegreesOffNW", "DegreesOffNE"), function(Column)pnorm(predict(PreProcModel, DF[, c("Delay.Min", "Wind.Avg", "DegreesOffNW", "DegreesOffNE")])[, Column]))
DFPP
scatterplot.matrix(~Delay.Min + Wind.Avg + DegreesOffNW + DegreesOffNE, data=DFPP)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
cor(DFPP)
cor(as.matrix(DFPP))
str(DFPP)
PreProcModel <- preProcess(DF[, c("Delay.Min", "Wind.Avg", "DegreesOffNW", "DegreesOffNE")], c("center", "scale", "YeoJohnson", "knnImpute"))
DFPP <- sapply(c("Delay.Min", "Wind.Avg", "DegreesOffNW", "DegreesOffNE"), function(Column)pnorm(predict(PreProcModel, DF[, c("Delay.Min", "Wind.Avg", "DegreesOffNW", "DegreesOffNE")])[, Column]))
scatterplotMatrix(~Delay.Min + Wind.Avg + DegreesOffNW + DegreesOffNE, data=DFPP)
cor(as.matrix(DFPP))
DFPP$Wind.Interaction <- pnorm(qnorm(DFPP$Wind.Avg) * qnorm(DFPP$DegreesOffNW))
qnorm(DFPP$Wind.Avg)
DFPP
DFPP$Wind.Avg
class(DFPP)
DFPP["Wind.Avg"]
DFPP[, "Wind.Avg"]
DFPP$Wind.Interaction <- pnorm(qnorm(DFPP[, "Wind.Avg"]) * qnorm(DFPP[, "DegreesOffNW"]))
scatterplotMatrix(~Delay.Min + Wind.Avg + DegreesOffNW + DegreesOffNE, data=DFPP)
DFPP <- as.data.frame(sapply(c("Delay.Min", "Wind.Avg", "DegreesOffNW", "DegreesOffNE"), function(Column)pnorm(predict(PreProcModel, DF[, c("Delay.Min", "Wind.Avg", "DegreesOffNW", "DegreesOffNE")])[, Column])))
DFPP$Wind.Avg
DFPP$Wind.Interaction <- pnorm(qnorm(DFPP$Wind.Avg) * qnorm(DFPP$DegreesOffNW))
scatterplotMatrix(~Delay.Min + Wind.Avg + DegreesOffNW + DegreesOffNE, data=DFPP)
scatterplotMatrix(~Delay.Min + Wind.Avg + DegreesOffNW + DegreesOffNE, Wind.Interaction, data=DFPP)
scatterplotMatrix(~Delay.Min + Wind.Avg + DegreesOffNW + DegreesOffNE + Wind.Interaction, data=DFPP)
PreProcModel <- preProcess(DF[, c("Delay.Min", "Wind.Avg", "DegreesOffNW", "DegreesOffNE")], c("center", "scale", "knnImpute"))
DFPP <- predict(PreProcModel, DF[, c("Delay.Min", "Wind.Avg", "DegreesOffNW", "DegreesOffNE")])
DFPP$Wind.Interaction <- DFPP$Wind.Avg * DFPP$DegreesOffNW
PreProcModel2 <- preProcess(DFPP, c("YeoJohnson"))
DFPP <- predict(PreProcModel2, DFPP)
DFPP <- as.data.frame(sapply(c("Delay.Min", "Wind.Avg", "DegreesOffNW", "DegreesOffNE"), function(Column)pnorm(DFPP)[, Column])))
DFPP <- as.data.frame(sapply(c("Delay.Min", "Wind.Avg", "DegreesOffNW", "DegreesOffNE"), function(Column)pnorm(DFPP[, Column])))
scatterplotMatrix(~Delay.Min + Wind.Avg + DegreesOffNW + DegreesOffNE + Wind.Interaction, data=DFPP)
DFPP
DFPP <- predict(PreProcModel, DF[, c("Delay.Min", "Wind.Avg", "DegreesOffNW", "DegreesOffNE")])
DFPP$Wind.Interaction <- DFPP$Wind.Avg * DFPP$DegreesOffNW
DFPP
PreProcModel2 <- preProcess(DFPP, c("YeoJohnson"))
PreProcModel <- preProcess(DF[, c("Delay.Min", "Wind.Avg", "DegreesOffNW", "DegreesOffNE")], c("center", "scale", "knnImpute"))
DFPP <- predict(PreProcModel, DF[, c("Delay.Min", "Wind.Avg", "DegreesOffNW", "DegreesOffNE")])
DFPP$Wind.Interaction <- DFPP$Wind.Avg * DFPP$DegreesOffNW
PreProcModel2 <- preProcess(DFPP, c("YeoJohnson"))
DFPP <- predict(PreProcModel2, DFPP)
DFPP <- as.data.frame(sapply(names(DFPP), function(Column)pnorm(DFPP[, Column])))
scatterplotMatrix(~Delay.Min + Wind.Avg + DegreesOffNW + DegreesOffNE + Wind.Interaction, data=DFPP)
cor(as.matrix(DFPP))
scatterplotMatrix(~Delay.Min + Wind.Avg + DegreesOffNW + DegreesOffNE + Wind.Interaction, data=DFPP)
scatterplotMatrix(~Delay.Min + Wind.Avg + DegreesOffNW + DegreesOffNE + Wind.Interaction, data=DFPP)[1,1]
```{r echo=FALSE, fig.width=8}
```{r echo=FALSE, fig.width=8}
install.packages("e1071")
rank(DF)
names(DF)
rownames(DF)
as.integer(rownames(DF))
cor(as.matrix(DFPP))
cor(as.matrix(DFPP))[1, ]
cor(as.matrix(DFPP))[1, -1]
library(xtable)
install.packages("xtable")
?xtable
library(xtable)
?xtable
methods(xtable)
Cor <- cor(as.matrix(DFPP))[1, -1]
class(Cor)
class(as.matrix(Cor))
Cor <- as.matrix(cor(as.matrix(DFPP))[1, -1])
print(xtable(Cor, digits=2, caption="Correlation with Delay in Minutes"), comment=FALSE)
DFPP
DF
DF$Time <- as.numeric(rownames(DF))
DF
install.packages("psych")
require(psych)
corr.p(as.matrix(DFPP))[1, -1]
corr.p(as.matrix(DFPP))
corr.p(Cor, N)
corr.p(Cor, nrow(DF))
corr.p(Cor, nrow(DF), short=F)
print(corr.p(Cor, nrow(DF)), short=F)
corr.p(Cor, nrow(DF))$p
Cor <- cor(as.matrix(DFPP))[1, -1]
P <- corr.p(Cor, nrow(DF))$p
Cor <- cor(as.matrix(DFPP))
P <- corr.p(Cor, nrow(DF))$p
Results <- Matrix(cbind(Correlation=Cor[1, -1], ProbabilityOfFindingByChange=P[1, -1]))
Results <- as.matrix(cbind(Correlation=Cor[1, -1], ProbabilityOfFindingByChange=P[1, -1]))
Results
DF1 <- read.csv("~/GitHub/AirportDelayAnalysis/Casefile-Data/Martijn_GeNIe_Exp.csv")
DF2 <- read.csv("~/GitHub/AirportDelayAnalysis/Casefile-Data/DelayData.csv")
DF <- cbind(DF1, DF2)
DF[,2] <- NULL
names(DF) <- c("Wind.Avg", "Delay.Min", "Wind", "Direction", "Delay")
DF <- with(DF, data.frame(Wind.Avg, Wind, Direction, Delay.Min, Delay))
DF$DegreesOffNW <- 22.5*c(6, 5, 7, 2, 4, 3, 1, 0, 6, 8, 7, 5, 4, 2, 1, 3)[as.integer(DF1$Direction)]
DF$DegreesOffNE <- 22.5*c(2, 1, 3, 2, 0, 1, 3, 4, 6, 4, 5, 7, 8, 6, 5, 7)[as.integer(DF1$Direction)]
DF$Time <- as.numeric(rownames(DF))
scatterplotMatrix(~Delay.Min + Wind.Avg + DegreesOffNW + DegreesOffNE, data=DF)
P
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
sqrt(120)
?confusionMatrix
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
confusionMatrix(predict(Model2, DFPP), DF$Delay)
GetBestTune <- function(Model) {
if (class(Model)=="caretStack")
Model$ens_model$results[rownames(Model$ens_model$bestTune), ]
else
Model$results[rownames(Model$bestTune), ]
}
GetOutOfSamplePredictions <- function(Model) {
BestTune <- GetBestTune(Model)
Parameters <- names(BestTune)[!(names(BestTune) %in% c(Model$perfNames, paste0(Model$perfNames, "SD")))]
BestTunePredictions <- Model$pred[eval(parse(text=paste(paste0("Model$pred$", Parameters, " == BestTune$", Parameters), collapse=" & "))), ]
Predictions <- data.frame()
for (Fold in names(Model$control$indexOut))
Predictions <- rbind(Predictions, unique(BestTunePredictions[BestTunePredictions$Resample==Fold, ]))
Predictions$pred[order(Predictions$rowIndex)]
}
confusionMatrix(GetOutOfSamplePredictions(Model2), DF$Delay)
GetOutOfSamplePredictions(Model2)
GetOutOfSamplePredictions <- function(Model) {
BestTune <- GetBestTune(Model)
Parameters <- names(BestTune)[!(names(BestTune) %in% c(Model$perfNames, paste0(Model$perfNames, "SD")))]
BestTunePredictions <- Model$pred[eval(parse(text=paste(paste0("Model$pred$", Parameters, " == BestTune$", Parameters), collapse=" & "))), ]
Predictions <- data.frame()
for (Fold in names(Model$control$indexOut))
Predictions <- rbind(Predictions, unique(BestTunePredictions[BestTunePredictions$Resample==Fold, ]))
Predictions$pred[order(Predictions$rowIndex)]
}
debugSource('~/GitHub/AirportDelayAnalysis/RandomForest.R')
GetOutOfSamplePredictions(Model2)
Predictions
Model$pred
names(Model)
debugSource('~/GitHub/AirportDelayAnalysis/RandomForest.R')
GetOutOfSamplePredictions(Model2)
BestTune
Model$pred
Model2 <- train(DF$Delay ~ Wind.Avg * DegreesOffNW + Wind.Avg * DegreesOffNE,
data = DFPP,
method = "rf",
tuneLength=5,
trControl = trainControl(method = "oob", savePredictions=T)
)
names(Model2)
Model2$pred
Model3$pred
Model4$pred
Model2 <- train(DF$Delay ~ Wind.Avg * DegreesOffNW + Wind.Avg * DegreesOffNE,
data = DFPP,
method = "rf",
tuneLength=5,
trControl = trainControl(method = "cv", savePredictions=T)
)
Model2$pred
Model1 <- train(Delay.Min ~ Wind.Avg * DegreesOffNW + Wind.Avg * DegreesOffNE,
data = DFPP,
method = "rf",
tuneLength=5,
trControl = trainControl(method = "cv", savePredictions=T)
)
GetOutOfSamplePredictions(Model2)
BestTune
BestTunePredictions
Predictions
names(Model$control$indexOut)
Model <- Model2
BestTune <- GetBestTune(Model)
Parameters <- names(BestTune)[!(names(BestTune) %in% c(Model$perfNames, paste0(Model$perfNames, "SD")))]
BestTunePredictions <- Model$pred[eval(parse(text=paste(paste0("Model$pred$", Parameters, " == BestTune$", Parameters), collapse=" & "))), ]
confusionMatrix(BestTunePredictions$pred, BestTunePredictions$obs)
Model <- train(DF$Delay ~ Wind.Avg * DegreesOffNW + Wind.Avg * DegreesOffNE,
data = DFPP,
method = "rf",
tuneLength=5,
trControl = trainControl(method = "cv", savePredictions=T)
)
BestTune <- GetBestTune(Model)
Parameters <- names(BestTune)[!(names(BestTune) %in% c(Model$perfNames, paste0(Model$perfNames, "SD")))]
Predictions <- Model$pred[eval(parse(text=paste(paste0("Model$pred$", Parameters, " == BestTune$", Parameters), collapse=" & "))), ]
print(confusionMatrix(Predictions$pred, Predictions$obs))
Model <- train(DF$Delay ~ Wind.Avg * DegreesOffNW + Wind.Avg * DegreesOffNE,
data = DFPP,
method = "rf",
tuneLength=5,
trControl = trainControl(method = "cv", savePredictions=T)
)
BestTune <- GetBestTune(Model)
Parameters <- names(BestTune)[!(names(BestTune) %in% c(Model$perfNames, paste0(Model$perfNames, "SD")))]
Predictions <- Model$pred[eval(parse(text=paste(paste0("Model$pred$", Parameters, " == BestTune$", Parameters), collapse=" & "))), ]
print(confusionMatrix(Predictions$pred, Predictions$obs))
set.seed(1)Model <- train(DF$Delay ~ Wind.Avg * DegreesOffNW + Wind.Avg * DegreesOffNE,
data = DFPP,
method = "rf",
tuneLength=5,
trControl = trainControl(method = "cv", savePredictions=T)
)
BestTune <- GetBestTune(Model)
Parameters <- names(BestTune)[!(names(BestTune) %in% c(Model$perfNames, paste0(Model$perfNames, "SD")))]
Predictions <- Model$pred[eval(parse(text=paste(paste0("Model$pred$", Parameters, " == BestTune$", Parameters), collapse=" & "))), ]
print(confusionMatrix(Predictions$pred, Predictions$obs))
set.seed(1)Model <- train(DF$Delay ~ Wind.Avg * DegreesOffNW + Wind.Avg * DegreesOffNE,
data = DFPP,
method = "rf",
tuneLength=5,
trControl = trainControl(method = "cv", savePredictions=T)
)
BestTune <- GetBestTune(Model)
Parameters <- names(BestTune)[!(names(BestTune) %in% c(Model$perfNames, paste0(Model$perfNames, "SD")))]
Predictions <- Model$pred[eval(parse(text=paste(paste0("Model$pred$", Parameters, " == BestTune$", Parameters), collapse=" & "))), ]
print(confusionMatrix(Predictions$pred, Predictions$obs))
methods(xtable)
ConfusionMatrix <- confusionMatrix(Predictions$pred, Predictions$obs)
names(ConfusionMatrix)
ConfusionMatrix$positive
ConfusionMatrix$table
ConfusionMatrix$overall
ConfusionMatrix$dots
ConfusionMatrix$byclass
ConfusionMatrix$byClass
class(ConfusionMatrix$table)
print(xtable(ConfusionMatrix$table, caption="Confusion Matrix for Random Forest Model"), comment=F)
print(xtable(ConfusionMatrix$overall, caption="Confusion Matrix for Random Forest Model"), comment=F)
print(xtable(as.matrix(ConfusionMatrix$overall), caption="Overall Statistics for Random Forest Model"), comment=F)
print(xtable(ConfusionMatrix$byClass, caption="Statistics by Class for Random Forest Model"), comment=F)
gsub("(.)([A-Z])", "\1 \2", names(ConfusionMatrix$overall))
gsub("(.)([A-Z])", "$1 $2", names(ConfusionMatrix$overall))
?gsub
gsub("(.)([A-Z])", "\\1 \\2", names(ConfusionMatrix$overall))
